<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" width="100%" minHeight="30" creationComplete="initRender(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import listeners.RetweetEvent;
			import listeners.ShowZoomedTextEvent;
			import listeners.SimQuestionChangeEvent;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			[Bindable] private var groupColor:uint = 0x333333;
			[Bindable] private var canSave:Boolean = false;
			
			/**
			 * 
			 * function to enable or not retweet and gives correct background color to the whole element
			 * 
			 * 
			 **/
			protected function initRenderer():void {
				var groupName:String = sciwork.getGroupNameById(data.groupId);
				//groupColor = sciwork.getColorBasedOnGroup(sciwork.cleanGroupName(groupName).toLowerCase());
				
			}
			
			/**
			 *
			 * Function to extract the text from the JSON body
			 * 
			 **/
			protected function extractText(quest:String):String {
				answerArea.text = data.answer;
				initRenderer();
				return quest;
			}
			
			protected function handleTextChange(event:TextOperationEvent):void {
				if(data.answer != answerArea.text) {
					canSave = true;
				}
				else {
					canSave = false;
				}
			}
			
			protected function saveAnswerBtn_clickHandler(event:MouseEvent):void {
				canSave = false;
				this.currentState = "saving";
				
				var urlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/simQuestion");
				urlRequest.method = URLRequestMethod.PUT;
				urlRequest.contentType = "application/json";
				var params:Object = new Object();
				params.id = data.questionId;
				params.answer = answerArea.text;
				urlRequest.data = com.adobe.serialization.json.JSON.encode(params);
				
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, questionCompleteHandler);
				loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				loader.load(urlRequest);
			}
			
			/**
			 * 
			 * Event handler for Event.COMPLETE
			 * 
			 **/
			protected function questionCompleteHandler(evt:Event):void {
				this.currentState = "default";
				
				var sqce:SimQuestionChangeEvent = new SimQuestionChangeEvent(resourceManager.getString('resources', 'CHECK_SIMQUESTION_ANSWER_STATUS'), true);
				sqce.questionId = data.questionId;
				sqce.questionAnswer = answerArea.text;
				dispatchEvent(sqce);
				
				data.answer = answerArea.text;
			}
			
			/**
			 * 
			 * Event handler for HTTPStatusEvent.HTTP_STATUS
			 * 
			 **/
			protected function httpStatusHandler(evt:HTTPStatusEvent):void {
				trace("SimQuestion PUT httpStatusHandler: "+evt.status);
			}
			
			/**
			 * 
			 * Event handler for IOErrorEvent.IO_ERROR
			 * 
			 **/
			protected function ioErrorHandler(evt:IOErrorEvent):void {
				Alert.show(sciwork.ALERT_TEXT16, "SimQuestion service error");
			}
			
			protected function zoomOut(event:MouseEvent):void {
				var szte:ShowZoomedTextEvent = new ShowZoomedTextEvent(resourceManager.getString('resources', 'SHOW_ZOOMED_TXT'), true);
				szte.currentState = "simulation";
				szte.text = answerArea.text;
				szte.objId = data.questionId;
				dispatchEvent(szte);
			}
			
			protected function initRender(event:FlexEvent):void {
				this.addEventListener('dataChange', onDataChange);
			}
			
			protected function onDataChange(event:Event):void {
				canSave = true;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="saving" />
	</s:states>
	
	<s:filters>
		<s:DropShadowFilter 
			distance="3" alpha=".6" blurX="4" blurY="4"
			angle="90" />
	</s:filters>
	
	<s:Rect left="5" right="5" top="5" bottom="5" radiusX="3" radiusY="3">
		<s:fill>
			<s:SolidColor id="itemBackground" color="#333333" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup top="10" right="10" bottom="10" left="10" >
		<s:Label fontSize="11" text="{extractText(data.question)}" width="100%" color="#CCCCCC" />
		<s:Spacer height="5" />
		<s:TextArea fontSize="11" width="100%" height="100%" color="#FFFFFF" id="answerArea" contentBackgroundAlpha="1" contentBackgroundColor="{uint(mx.core.FlexGlobals.topLevelApplication.currentGroup.colour)}" change="handleTextChange(event)" />
		<s:Button buttonMode="true" fontSize="11" width="100%" chromeColor="{groupColor}" label="LAGRE" id="saveAnswerBtn" color="#CCCCCC" enabled="{canSave}" click="saveAnswerBtn_clickHandler(event)" />
	</s:VGroup>
	
	<s:Button buttonMode="true" right="6" top="6" width="20" icon="@Embed('assets/10-plus.png')" skinClass="skins.fullScreenButtonSkin" click="zoomOut(event)" />

	<s:SkinnableContainer width="100%" height="100%" backgroundAlpha=".8" backgroundColor="#333333" includeIn="saving">
		<s:BusyIndicator horizontalCenter="0" verticalCenter="0" />
	</s:SkinnableContainer>
</s:ItemRenderer>
