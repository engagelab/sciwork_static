<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" verticalAlign="bottom" gap="0" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import listeners.SceneChangeEvent;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.CheckBox;
			import spark.primitives.BitmapImage;
			
			
			[Bindable] private var _currentScene:Object;
			
			/**
			 *
			 * Method to initialise the footer scene object.
			 * 
			 **/
			public function initScene(scene:Object, completedTasks:Array):void {
				//assign the scene object some metadata
				_currentScene = scene;
				sceneId = _currentScene.sceneId;
				
				var cb:FooterTask;
				//for each tasks found in the scene, display them as a "finished" or "unfinished" checkbox
				for each (var task:Object in scene.tasks as ArrayCollection) {
					cb = new FooterTask();
					//cb.width = (this.width-fsb.width)/(scene.tasks as ArrayCollection).length;
					cb.percentWidth = 100;
					
					if(task.taskId != "50c5c602b760a8ae9a3bcb37" && task.taskId != "50f689c2b760de188086ebe1") {
						sceneGroup.addElement(cb);
					}
					
					//only way to display the checkbox a little bigger
					//cb.scaleX = 1.3;
					//cb.scaleY = 1.3;
					
					//assign the task id to the object
					cb.taskId = task.taskId;
					
					//assess if task is completed
					if(completedTasks.indexOf(new String(cb.taskId)) > -1) {
						cb.currentState = "completed";
					}
					
					//if(cb.enabled) {
						//cb.buttonMode = true;
						//cb.addEventListener(MouseEvent.CLICK, handleTaskClick);
					//}
				}
			}
			
			/**
			 *
			 * Event handling for click on checkboxes
			 * 
			 **/
			protected function handleTaskClick(evt:MouseEvent):void {
				
			}
			
			/**
			 *
			 * Event handling for click on scene button
			 * 
			 **/
			protected function handleSceneClick(event:MouseEvent):void {
				var sce:SceneChangeEvent = new SceneChangeEvent(resourceManager.getString('resources', 'SCENE_CHANGED'), true);
				sce.scene = this._currentScene;
				sce.eventOrigin = SceneChangeEvent.FOOTER;
				sce.sceneIndex = sceneIndex;
				dispatchEvent(sce);
			}

			/**
			 *
			 * Method to refresh the completed tasks of this scene object
			 * 
			 **/
			public function updateCompletedTasks(completedTasks:Array):void {
				var cb:FooterTask;
				
				for (var i:int = 0; i < sceneGroup.numElements; i++) {
					cb = sceneGroup.getElementAt(i) as FooterTask;
					
					if(completedTasks.indexOf(new String(cb.taskId)) > -1) {
						cb.currentState = "completed";
					}
					else {
						cb.currentState = "normal";
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:String id="sceneId" />
		<fx:Number id="sceneIndex" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="selected" />
	</s:states>
	
	<components:FooterSceneButton id="fsb" imgUrl="{'assets/'+_currentScene.icon}" currentState="{this.currentState}" click="handleSceneClick(event)" buttonMode.default="true" buttonMode.selected="false" />
	<s:Spacer width="3" />
	<s:HGroup id="sceneGroup" gap="0" width="100%" />
</s:HGroup>
