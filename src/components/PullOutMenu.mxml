<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init(event)" backgroundColor="0xE6E6E6" borderColor="black" xmlns:selection="content.workarea.selection.*" xmlns:workarea="content.workarea.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Move id="closeDrawer" 
				target="{this}"
				xTo="1000"
				
				duration="500"
				easer="{sineEasing}" effectEnd="setOldX(event)"/>
		<s:Move id="openDrawer" 
				target="{this}"
				xTo="755"
				duration="500"
				easer="{sineEasing}" effectEnd="setOldX(event)"/>
		<s:Power id="powerEasing"
				 exponent="2"/>
		<s:Sine id="sineEasing"
				easeInFraction="0.6"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import listeners.CaptureFullscreenEvent;
			
			import mx.events.EffectEvent;
			
			private var drawerOut:Boolean = false;
			private var wasDragged:Boolean = false;
			private var oldX:int;
			private var _scene:Object;
			private var _task:Object;
			private var _mode:String;
			
			private function init(evt:Event):void {
				
				this.width = 245;
				this.oldX = this.x;
				dragger.addEventListener(MouseEvent.MOUSE_DOWN, draggerDown);
				parent.addEventListener(MouseEvent.MOUSE_UP, draggerUp);
				dragger.addEventListener(MouseEvent.CLICK, draggerClick);
			//	dragger.setStyle("borderThicknessRight", "0");
			}
			
			private function draggerDown(evt:MouseEvent):void {
				this.startDrag(false,new Rectangle(1000-245,this.y,245,0));
			}
			private function setOldX(event:EffectEvent):void {
				this.oldX = this.x;
			}
			private function draggerClick(evt:MouseEvent):void {
				if(!wasDragged) {
					if(drawerOut) {
						closeDrawer.play();
						drawerOut = false;
					}
					else {
						openDrawer.play();
						drawerOut = true;
					}
				}
				else
					wasDragged = false;
			}

			private function draggerUp(evt:MouseEvent):void {
				this.stopDrag();
				if(this.x != this.oldX) {
					wasDragged = true;
					if(this.x != 1000-245 && this.x != 1000) {
						if(drawerOut) {
							closeDrawer.play();
							drawerOut = false;
						}
						else {
							openDrawer.play();
							drawerOut = true;
						}
					}
					else
						drawerOut ? drawerOut = false : drawerOut = true;
				}
			}
			public function closeTheDrawer():void {
				closeDrawer.play();
			}
			
			public function setupDrawer(mode:String):void {

				_mode = mode;
				
				switch(_mode) {
					case "questions" :
						this.currentState = "tweets";
						selection.enableTeacherMode("questions");
						break;
					case "tweets" :
						this.currentState = "tweets";
						selection.enableTeacherMode("teacherTweets");
						break;
					case "assets" :
						this.currentState = "picsvids";
						selection.enableTeacherMode("assets");
						break;
					case "simulation" :
						this.currentState = "simulation";
						selection.enableTeacherMode("simulation");
						break;
					case "article" :
						break;
					case "portfolio" :
						break;
				}
			}
			private function capture(evt:MouseEvent):void {
				var cfse:CaptureFullscreenEvent = new CaptureFullscreenEvent(resourceManager.getString('resources', 'CAPTURE_FULLSCREEN'), true);
				dispatchEvent(cfse);
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="disabled" />
		<s:State name="tweets" />
		<s:State name="html" />
		<s:State name="simulation" />
		<s:State name="picsvids" />
	</s:states>
	
	<s:Image source="assets/pullOutTab.png" x="-37" y="2" id="dragger" />
	<s:VGroup height="100%" width="100%" top="5" right="5" bottom="5" left="5">
		<!--s:Image source="assets/taBilde.png" id="screenCaptureButton" click="capture(event)" /-->
		<!--mx:ProgressBar id="pbar" horizontalCenter="0" verticalCenter="0" mode="manual" color="#ffffff" visible="false" includeInLayout="false"/-->
		<!--selection:TweetsSelection id="tweetsSelection" width="80%" height="100%"/-->
		<!--workarea:TweetsInput id="tweetInput" width="80%" height="50" /-->
		<selection:Selection id="selection" width="100%" height="100%" excludeFrom="html, simulation" />
	</s:VGroup>
	<s:filters>
		<s:DropShadowFilter 
			distance="3" alpha=".3" blurX="7" blurY="7"
			angle="90" />
	</s:filters>
</s:BorderContainer>
