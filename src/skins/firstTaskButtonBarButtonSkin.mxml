<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="60" 
                   alpha.disabledStates="0.5">
	
	<fx:Metadata>[HostComponent("spark.components.ButtonBarButton")]</fx:Metadata>
    
    <!-- host component -->
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];
		
		//[Bindable] private var groupColour:uint = uint(mx.core.FlexGlobals.topLevelApplication.currentGroup.colour);

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            /*var cr:Number = getStyle("cornerRadius");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                //shadow.radiusX = cornerRadius;
                fill.radiusX = cornerRadius;
                //lowlight.radiusX = cornerRadius;
                //highlight.radiusX = cornerRadius;
                //border.radiusX = cornerRadius;
            }
            
            //if (highlightStroke) highlightStroke.radiusX = cornerRadius;
            //if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
            //if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
            */
			iconImage.source = 'assets/'+(this as Object).hostComponent.data.icon; 
			var _label:String = (this as Object).hostComponent.data.label;
			lab.text = _label.substr(0,1).toUpperCase()+_label.substr(1).toLowerCase();
			super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
        private var cornerRadius:Number = 0;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
    <!-- layer 1: shadow -->
    <!--- @private 
    <s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                    <s:GradientEntry color="0x000000" 
                                   color.downStates="0xFFFFFF"
                                   alpha="0.01"
                                   alpha.downStates="0" />
                    <s:GradientEntry color="0x000000" 
                                   color.downStates="0xFFFFFF" 
                                   alpha="0.07"
                                   alpha.downStates="0.5" />
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
	-->
    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="6" right="6" top="4" bottom="4" radiusX="4" radiusY="4">
        <s:fill>
            <s:LinearGradient rotation="90">
				<!-- original
                <s:GradientEntry color="0xFFFFFF" 
                               color.selectedUpStates="0xBBBDBD"
                               color.overStates="0xBBBDBD" 
                               color.downStates="0xAAAAAA"
                               alpha="0.85" 
                               alpha.overAndSelected="1" />
                <s:GradientEntry color="0xD8D8D8" 
                               color.selectedUpStates="0x9FA0A1"
                               color.over="0x9FA0A1" 
                               color.overAndSelected="0x8E8F90"
                               color.downStates="0x929496" 
                               alpha="0.85"
                               alpha.overAndSelected="1" />
				-->
				<s:GradientEntry color="0xFFFFFF" 
								 color.over="0xFFFFFF" 
								 color.selectedStates="0xFFFFFF"
								 alpha="0" 
								 alpha.over="0"
								 alpha.selectedStates="0"/>
				<s:GradientEntry color="0x999999" 
								 color.over="0x999999" 
								 color.selectedStates="0x999999"
								 alpha="0" 
								 alpha.over="1"
								 alpha.selectedStates="1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <!-- layer 3: fill lowlight -->
    <!--- @private 
    <s:Rect id="lowlight" left="1" right="1" top="1" bottom="1" radiusX="2">
        <s:fill>
            <s:LinearGradient rotation="270">
                <s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627" />
                <s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099" />
                <s:GradientEntry color="0x000000" ratio="0.48001" alpha="0" />
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
	-->
    <!-- layer 4: fill highlight -->
    <!--- @private -->
    <s:Rect id="highlight" left="4" right="4" top="4" bottom="4" radiusX="4" radiusY="4">
        <s:fill>
			<!-- original
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0xFFFFFF"
                                 ratio="0.0"
                                 alpha="0.33" 
                                 alpha.selectedUpStates="0.22"
                                 alpha.overStates="0.22" 
                                 alpha.downStates="0.12"/>
                <s:GradientEntry color="0xFFFFFF"
                                 ratio="0.48"
                                 alpha="0.33"
                                 alpha.selectedUpStates="0.22"
                                 alpha.overStates="0.22" 
                                 alpha.downStates="0.12"/>
                <s:GradientEntry color="0xFFFFFF"
                                 ratio="0.48001"
                                 alpha="0" />
            </s:LinearGradient>
			-->
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.0"
								 alpha="0.33" 
								 alpha.selectedUpStates="0.22"
								 alpha.overStates="0.22" 
								 alpha.downStates="0.12"/>
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48"
								 alpha="0"
								 alpha.selectedUpStates="0"
								 alpha.overStates="0" 
								 alpha.downStates="0"/>
				<s:GradientEntry color="0xFFFFFF"
								 ratio="0.48001"
								 alpha="0" />
			</s:LinearGradient>
        </s:fill>
    </s:Rect>
	
    <!-- layer 5: highlight stroke (all states except down) -->
    <!--- @private -->
    <s:Rect id="highlightStroke" right="0" top="10" bottom="10" width="1">
        <s:fill>
			<s:SolidColor color="#999999" />
		</s:fill>
    </s:Rect>
	
    
    <!-- layer 6: highlight stroke (down state only) -->
    <!--- @private 
    <s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="2"
            includeIn="downStates, selectedUpStates, overAndSelected">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0" />
                <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001" />
                <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011" />
                <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965" />
                <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
	-->
    <!--- @private 
    <s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2" radiusX="2"
            includeIn="downStates, selectedUpStates, overAndSelected">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0" />
                <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
	-->
    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private
    <s:Rect id="border" right="-1" top="5" bottom="5" width="1">
		<s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000" 
                               alpha="0.5625"
                               alpha.down="0.6375"
                               alpha.selectedStates="0.6375" />
                <s:GradientEntry color="0x000000" 
                               alpha="0.75" 
                               alpha.down="0.85"
                               alpha.selectedStates="0.85" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
	-->
	
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:VGroup horizontalCenter="0" verticalCenter="0" gap="3" horizontalAlign="center">
		<s:Image id="iconImage" width="29" height="14" smooth="true" smoothingQuality="high" cacheAsBitmap="true"/>
		<s:Label id="lab" color="#333333" maxDisplayedLines="1" />
		<!-- <s:Label id="labelDisplay" color="#FFFFFF" maxDisplayedLines="1" /> -->
	</s:VGroup>
    
</s:SparkButtonSkin>
