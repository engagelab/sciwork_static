<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="initComponent(event)">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import components.NRJButton;
			
			import listeners.EnergyChosenEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.UIDUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Button;
			
			protected function initComponent(event:FlexEvent):void {
				this.addEventListener(resourceManager.getString('resources', 'REFRESH_NRJS'), refreshEnergies);
				dispatchEvent(new Event(resourceManager.getString('resources', 'REFRESH_NRJS'), true));
			}
			
			protected function getEnergySources_faultHandler(event:FaultEvent):void {
				Alert.show(sciwork.ALERT_TEXT8, "Energy Sources service error");
			}
			
			protected function getEnergySources_resultHandler():void {
				//var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				var res:Object = com.adobe.serialization.json.JSON.decode(new String('[  {    "energy" : "atomkraft",    "id" : "50c1b52ab76004321af58e09",    "inuse" : false,    "token" : "",    "icon" : "nrj-3.png"  },  {    "energy" : "bioenergi",    "id" : "50d458b0b760aebb99f66df2",    "inuse" : false,    "token" : "",    "icon" : "nrj-5.png"  },  {    "energy" : "bÃ¸lgekraft",    "id" : "50d45872b760aebb99f66df1",    "inuse" : false,    "token" : "",    "icon" : "nrj-6.png"  },  {    "energy" : "sol",    "id" : "50c1b53bb76004321af58e0a",    "inuse" : false,    "token" : "",    "icon" : "nrj-1.png"  },  {    "energy" : "vann",    "id" : "50c1b540b76004321af58e0b",    "inuse" : false,    "token" : "",    "icon" : "nrj-2.png"  },  {    "energy" : "vind",    "id" : "50c1b581b76004321af58e0c",    "inuse" : false,    "token" : "",    "icon" : "nrj-4.png"  }]'));
				
				
				var nrjs:ArrayCollection = new ArrayCollection();
				var b:NRJButton;
				
				for each (var nrj:Object in res) {
					b = new NRJButton();
					b.bData = nrj;
					b.name = nrj.id;
					b.label = "#"+nrj.energy;
					b.buttonMode = true;
					b.width = 100;
					b.height = 30;
					b.addEventListener(MouseEvent.CLICK, pickEnergy);
					nrjs.addItem(b);
					
					if(nrj.inuse) {
						b.enabled = false;
					}
					else {
						b.enabled = true;
					}
				}
				
				var sortfield:SortField = new SortField();
				sortfield.name = "label";
				sortfield.descending = false;
				
				var sort:Sort = new Sort();
				sort.fields = [sortfield];
				
				nrjs.sort = sort;
				nrjs.refresh();
				
				for each (var sortedNrj:Button in nrjs) {
					energies.addElement(sortedNrj);
				}
			}
			
			protected function pickEnergy(evt:MouseEvent):void {
				//bi.visible = true;
				
				/*var upurlRequest:URLRequest = new URLRequest(resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/energySources");
				upurlRequest.method = URLRequestMethod.PUT;
				upurlRequest.contentType = "application/json";
				
				var statusObject:Object = new Object();
				statusObject.stat = "pick";
				token = UIDUtil.createUID();
				statusObject.token = token;
				statusObject.id = new String(evt.currentTarget.name);
				
				upurlRequest.data = com.adobe.serialization.json.JSON.encode(statusObject);
				var uploader:URLLoader = new URLLoader();
				uploader.addEventListener(Event.COMPLETE, upcompleteHandler);
				uploader.load(upurlRequest);*/
				
				var ece:EnergyChosenEvent = new EnergyChosenEvent(resourceManager.getString('resources', 'ENERGY_CHOSEN'), true);
				ece.energyId = new String(evt.currentTarget.name);
				ece.energyTitle = new String(evt.currentTarget.bData.energy);
				dispatchEvent(ece);
			}
			
			private function upcompleteHandler(ev:Event):void {
				bi.visible = false;
				var res:Object = com.adobe.serialization.json.JSON.decode(String(ev.target.data));
				
				if(res != null) {
					if(res.inuse && this.token == res.token) {
						var ece:EnergyChosenEvent = new EnergyChosenEvent(resourceManager.getString('resources', 'ENERGY_CHOSEN'), true);
						ece.energyId = res.id;
						ece.energyTitle = res.energy;
						dispatchEvent(ece);
					}
					else {
						dispatchEvent(new Event(resourceManager.getString('resources', 'REFRESH_NRJS'), true));
					}
				}
				else {
					dispatchEvent(new Event(resourceManager.getString('resources', 'REFRESH_NRJS'), true));
				}
			}
			
			private function refreshEnergies(evt:Event):void {
				energies.removeAllElements();
				//getEnergySources.url = resourceManager.getString('resources', 'TWEET_SERVER_URL') + "/energySources";
				//getEnergySources.send();
				
				getEnergySources_resultHandler();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:String id="token" />
		<!-- s:HTTPService method="GET" headers="{'pragma', 'no-cache'}" result="getEnergySources_resultHandler(event)" fault="getEnergySources_faultHandler(event)" resultFormat="text" id="getEnergySources" /-->
	</fx:Declarations>
	
	<s:Group right="10" top="10">
		<s:TileGroup id="energies" width="100" horizontalGap="20" verticalGap="10" />
	</s:Group>
	
	<s:BorderContainer visible="false" width="100%" height="100%" backgroundColor="#333333" backgroundAlpha=".7" id="bi">
		<s:BusyIndicator width="50" height="50" horizontalCenter="0" verticalCenter="0" symbolColor="#FFFFFF" />
	</s:BorderContainer>
</s:Group>
