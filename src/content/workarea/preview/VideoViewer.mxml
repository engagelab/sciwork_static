<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="initVideoViewer(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			
			/**
			 * 
			 * YouTube Flash API Reference    https://developers.google.com/youtube/flash_api_reference
			 * 
			 **/
			// This will hold the API player instance once it is initialized.
			public var player:Object;
			private var loader:Loader;
			
			[Bindable] public var videoWidth:uint;
			[Bindable] public var videoHeight:uint;
			
			private var _timeUpdateInterval:Number;
			
			// UIComponent required to add Loader to an IVisualElement
			// private var container:UIComponent = new UIComponent();
			
			private function initVideoViewer(event:FlexEvent):void
			{
				addElement(container);
				loader = new Loader();
		//		var context:LoaderContext = new LoaderContext();
		//		if(Security.sandboxType == Security.REMOTE)
		//			context.securityDomain = SecurityDomain.currentDomain;
				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));
			}
			
			private function onLoaderInit(event:Event):void {
				container.addChild(loader);
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onPlayerStateChange);
				loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);
			}
			
			private function onPlayerReady(event:Event):void {
				// Event.data contains the event parameter, which is the Player API ID 
				trace("player ready:", Object(event).data);
				
				// Once this event has been dispatched by the player, we can use
				// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl
				// to load a particular YouTube video.
				player = loader.content;
				totalTime.text = " | " + getFormattedTime(0);
				elaspsedTime.text = getFormattedTime(0); 
				dispatchEvent(new Event(resourceManager.getString('resources', 'VIDEO_PLAYER_READY'), true));
			}
			
			private function onPlayerError(event:ErrorEvent):void {
				// Event.data contains the event parameter, which is the error code
				trace("player error:", event.errorID);
			}
			
			private function onPlayerStateChange(event:Event):void {
				// Event.data contains the event parameter, which is the new player state
				trace("player state:", Object(event).data);
				
				clearInterval(_timeUpdateInterval);
				slider.enabled = false;
				switch(new Number(Object(event).data)) {
					case -1:
					{
						this.currentState = "paused";
						break;
					}
						
					case 0:
					{
						slider.value = 0;
						this.currentState = "paused";
						break;
					}
						
					case 1:
					{
						this.currentState = "playing";
						slider.enabled = true;
						_timeUpdateInterval = setInterval(updateElapsedTime, 1000);
						break;
					}
						
					case 2:
					{
						this.currentState = "paused";
						break;
					}
				}
				
			}
			
			protected function updateElapsedTime():void {
				slider.maximum = player.getDuration();
				slider.value = player.getCurrentTime();
				
				totalTime.text = " | " + getFormattedTime(player.getDuration());
				elaspsedTime.text = getFormattedTime(player.getCurrentTime()); 
			}
			
			
			private function onVideoPlaybackQualityChange(event:Event):void {
				// Event.data contains the event parameter, which is the new video quality
				trace("video quality:", Object(event).data);
			}
			
			/**
			 * 
			 * Called from the instantiator to set up preview type and source
			 * 
			 **/
			public function setupPreview(previewType:String, fullSizeSource:String):void {
				// Set appropriate player dimensions for your application
				player.setSize(container.width, container.height-25);
				player.cueVideoById(fullSizeSource);
			}
			
			/**
			 * 
			 * Function to return the played time/maximum time when scrubbing
			 * 
			 **/
			protected function getFormattedTime(val:Number):String {
				if(isNaN(val) || val == -1) {
					return "00:00";
				}
				else {
					// Current play time
					var sec:Number = val;
					var h:Number = Math.floor(sec/3600);
					var m:Number = Math.floor((sec%3600)/60);
					var s:Number = Math.floor((sec%3600)%60);
					
					return (h == 0 ? "":(h<10 ? "0"+h.toString()+":" : h.toString()+":"))
					+(m<10 ? "0"+m.toString() : m.toString())+":"
						+(s<10 ? "0"+s.toString() : s.toString());
				}
			}
			
			/**
			 * 
			 * Handles seek clicks on progress trackbar
			 * 
			 **/
			protected function sliderChanged(evt:SliderEvent):void {
				if(evt.clickTarget == "track") {
					player.seekTo(evt.value);
				}
			}
			
			/**
			 * 
			 * Stop video procedure
			 * 
			 **/
			protected function stopVideo(event:MouseEvent):void {
				player.pauseVideo();
				player.seekTo(0);
				slider.value = 0;
				elaspsedTime.text = getFormattedTime(0); 
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="paused" />
		<s:State name="playing" />
	</s:states>
	

	<s:SpriteVisualElement id="container" width="100%" height="100%"/>
	
	<s:Group width="100%" bottom="0">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#000000" />
					<s:GradientEntry color="#333333" />
					<s:GradientEntry color="#999999" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" height="25" gap="0" verticalAlign="middle">
			<s:Button id="playButton" buttonMode="true" height="100%" width="{playButton.height}" skinClass="skins.VideoPlayButtonSmall" excludeFrom="playing" click="player.playVideo();" />
			<s:Button id="pauseButton" buttonMode="true" height="100%" width="{pauseButton.height}" skinClass="skins.VideoPauseButtonSmall" includeIn="playing"  click="player.pauseVideo();"/>
			<s:Button id="stopButton" buttonMode="true" height="100%" width="{stopButton.height}" skinClass="skins.VideoStopButtonSmall" excludeFrom="paused"  click="stopVideo(event)"/>
			<s:Spacer width="10" />
			<s:Group width="100%" height="100%">
				<mx:HSlider id="slider" bottom="10"
							thumbSkin="skins.VideoThumb" 
							trackSkin="skins.VideoTrack" 
							trackHighlightSkin="skins.VideoTrackSkin" 
							showTrackHighlight="true" 
							enabled="false" 
							width="100%" 
							visible="true" 
							allowTrackClick="true" 
							change="sliderChanged(event)" />
			</s:Group>
			<s:Label id="elaspsedTime" color="#FFFFFF" />
			<s:Label id="totalTime" color="#CCCCCC" />
			<s:Spacer width="10" />
		</s:HGroup>
	</s:Group>
	
</s:Group>
